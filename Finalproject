#include "mbed.h"
#include "LCD_DISCO_F429ZI.h"
#include <string>
#include "math.h"

#define TABLE_SIZE 120
#define TWO_PI (3.14159 * 2)

float samples [TABLE_SIZE], phaseIncrement = TWO_PI/TABLE_SIZE, currentPhase = 0.0;
int i;


InterruptIn button(USER_BUTTON);
LCD_DISCO_F429ZI lcd;
AnalogOut analog_out(PA_5);
AnalogIn analog_value(PA_6); //Using pin PA2 for analog input
AnalogIn analog_value1(PA_2);//Not using yet might for negative numbers if there is time
DigitalOut led(LED1);       //Making the LED on if below 1V
DigitalOut led_timer(LED2); //Using for the timer 

bool square = true, sin_wave = true, tri_wave = true;
int square_timer = 0, change_output = 1;

Timer timer; //In seconds use read_ms() for miliseconds as an int
extern void start_lcd();
extern void draw_grid();
extern void draw_sin(float, int, int);
extern float find_freq(float[], float[]); 
extern void a_out_sawtooth();
extern void a_out_square();
extern void a_out_triangle();
extern void a_out_sin(int);
extern void pressed();
extern void released();

int main()
{
    button.fall(&pressed);
    button.rise(&released);
    
    for (int i = 0; i < TABLE_SIZE; i ++)
    {
        samples[i] = (sin(currentPhase)+1)*0.5;
        currentPhase += phaseIncrement;
    }
    
    start_lcd();
    float meas_r, meas_v, meas_r1, meas_v1, freq_out = 0, freq_average = 1, array_time [128], array_position [128];
    int clock_timer = 0, run_number = 1, position = 0;
    timer.start();
    while(1) 
    {
        if(change_output == 1)
            a_out_triangle();
        else if (change_output == 2)
            a_out_square();
        else if (change_output == 3)
            a_out_sawtooth();
        else
        {    
            if (position > TABLE_SIZE){position = 0;}
            a_out_sin(position); 
            position++;            
        }
        
        meas_r = analog_value.read(); // Read the analog input value (value from 0.0 to 1.0 = full ADC conversion range)
        meas_v = meas_r * 2.92; // Converts value in the 0V-3.3V range
        meas_r1 = analog_value1.read();
        meas_v1 = meas_r1 * 2.92;
        
        char output_number[16];
        char output_number1[16];
        char output_test[16];
        sprintf( output_number, "Input: %.2f V", meas_v);
        lcd.DisplayStringAt(0, LINE(0), (uint8_t *) output_number , CENTER_MODE);
        if ( clock_timer < 128 )
        {
            array_position[clock_timer] = meas_v;
            array_time[clock_timer] = timer.read_ms()/1000.0;
        } 
        
        if ( clock_timer == 127 )
        {
            freq_out = find_freq(array_position, array_time);
            freq_average = ((freq_average*(run_number))+(freq_out))/(run_number+1);
            run_number++;
            sprintf( output_number1, "%.2f Hz", freq_out);
            sprintf( output_test, "Time: %.2f S", timer.read_ms()/1000.0);
        //    timer.reset();
        }
        
        lcd.DisplayStringAt(0, LINE(1), (uint8_t *) output_number1 , CENTER_MODE);
        lcd.DisplayStringAt(0, LINE(2), (uint8_t *) output_test , CENTER_MODE);
        draw_sin(meas_v, clock_timer, 0);
   //     draw_sin(meas_v1, clock_timer, 1);
        
       if (meas_v < 1) 
            led = 1; // LED ON
 
        else 
            led = 0; // LED OFF

        if (clock_timer == 240)
        {
            clock_timer = 0;
            lcd.Clear(LCD_COLOR_WHITE);;
            draw_grid();
        }
        else
            clock_timer++;
            
  //      wait(0.1); // 10th of a second
    }
}

void start_lcd()
{
    lcd.Clear(LCD_COLOR_BLUE);
    lcd.SetBackColor(LCD_COLOR_BLUE);
    lcd.SetTextColor(LCD_COLOR_WHITE);
    wait(0.3);
    lcd.DisplayStringAt(0, LINE(4), (uint8_t *)"DISCOVERY BOARD", CENTER_MODE);
    lcd.DisplayStringAt(0, LINE(5), (uint8_t *)"STM32F429", CENTER_MODE);
    lcd.DisplayStringAt(0, LINE(6), (uint8_t *)"By: Teddy Sosnowski", CENTER_MODE);
    wait(1);
    lcd.Clear(LCD_COLOR_WHITE);
    lcd.SetFont(&Font16);
    draw_grid();
    lcd.SetTextColor(LCD_COLOR_WHITE);
    lcd.SetBackColor(LCD_COLOR_BLACK);
}
void draw_sin(float location, int x_axis, int input_number)
{
    int y_axis = location * 24;      
    y_axis = 180 - y_axis;
    //Center at pixel 120x180 for grid
 //   if (input_number == 0)
        lcd.DrawPixel(x_axis, y_axis, LCD_COLOR_RED);
//    else
//        lcd.DrawPixel(x_axis, y_axis, LCD_COLOR_GREEN);
}      

void draw_grid()
{ 
    lcd.SetTextColor(LCD_COLOR_BLACK);
    lcd.SetBackColor(LCD_COLOR_WHITE);
    lcd.DrawHLine(0, 180, 240); //240X320 screen size
    lcd.DrawVLine(2, 98, 164);
    lcd.DisplayChar(5, 85 , 'V');
    lcd.DisplayChar(225, 160, 'T');
    lcd.SetTextColor(LCD_COLOR_GRAY);

    lcd.DrawHLine(0, 156, 36);
    lcd.DrawHLine(0, 132, 36);
    lcd.DrawHLine(0, 108, 36);
    lcd.DrawHLine(0, 204, 36);
    lcd.DrawHLine(0, 228, 36);
    lcd.DrawHLine(0, 252, 36);

    lcd.DrawVLine(20, 177, 6);
    lcd.DrawVLine(40, 177, 6);
    lcd.DrawVLine(60, 177, 6);
    lcd.DrawVLine(80, 177, 6);
    lcd.DrawVLine(100, 177, 6);
    lcd.DrawVLine(120, 177, 6);
    lcd.DrawVLine(140, 177, 6);
    lcd.DrawVLine(160, 177, 6);
    lcd.DrawVLine(180, 177, 6);
    lcd.DrawVLine(200, 177, 6);
    lcd.DrawVLine(220, 177, 6);  
    lcd.SetTextColor(LCD_COLOR_WHITE);
    lcd.SetBackColor(LCD_COLOR_BLACK);  
}

float find_freq(float position[], float time [])
{
    float total_count = 0.0, total_time = 0.0;
    int array_length = 128;
        
    for (int i = 1 ; i < array_length ; i++ )
    {
        if ((position [i] >= position[i-1]) && (position[i] > position[i+1]))
                total_count++;
    }
    total_time = time[array_length-1] - time[0];        
    return  ( total_count / total_time );

}
    
void a_out_sawtooth()
{
    if (analog_out == 1){analog_out = 0;}
    else{analog_out = analog_out + 0.01;}    
}

void a_out_square()
{
    if(square_timer >= 29)
    {
        square_timer = 0;
        square = !square;
    }
    if(square){analog_out = 1;}
    else{analog_out = 0;}
    square_timer++;
}

void a_out_triangle()
{
    if(tri_wave){analog_out = analog_out + 0.01;}
    else{analog_out = analog_out - 0.01;}
        
    if(analog_out == 1){tri_wave = false;}
    if(analog_out == 0){tri_wave = true;}
}    

void a_out_sin(int i)
{
    analog_out = samples[i]; 
}

void pressed()
{
    change_output = change_output + 1;
    if(change_output == 5){change_output = 1;}
}

void released()
{
    wait(0.1);
}
